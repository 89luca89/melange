# apko lima configuration file
#
#   To start environment:
#     limactl start --tty=false mac/lima/melange-playground.yaml
#
#   To obtain root shell (needed for apko build):
#     limactl shell melange-playground sudo su -c "HOME=\"${HOME}\" ash"
#
#   Build an example image:
#     melange build -r https://packages.wolfi.dev/os -k /usr/lib/wolfi-signing.rsa.pub --arch x86_64 examples/go-hello.yaml
#
#   To delete environment:
#     limactl delete -f melange-playground
#
# This example requires Lima v0.7.0 or later.
images:
- location: "https://github.com/lima-vm/alpine-lima/releases/download/v0.2.28/alpine-lima-std-3.18.0-x86_64.iso"
  arch: "x86_64"
  digest: "sha512:0f0c844d97a2a605cdaf0c4963d88ec8b7dca4ef50b6141c589102e65d7ddc47da9536a1cffe093f3fc7530236ce0ec2c24704475f500551afa6fc83bb6ddbe0"
- location: "https://github.com/lima-vm/alpine-lima/releases/download/v0.2.28/alpine-lima-std-3.18.0-aarch64.iso"
  arch: "aarch64"
  digest: "sha512:a8deab1e1948af1f27f808e855ab2fe5022c3a10cd6e9bb0fe007915bc5e40fe68b81ca8de28d234a7d70938669eb30ca7cb8220eda329a2303d0434c8d79d64"
cpus: 2
memory: 8GiB
disk: 20GiB
firmware:
  legacyBIOS: true
containerd:
  system: false
  user: false
mounts:
- location: "~"
  writable: true
- location: "/tmp/lima"
  writable: true
provision:
- mode: system
  script: |
    #!/bin/sh
    set -eux -o pipefail
    apk update
    apk add --update --no-cache vim git make bubblewrap curl tar
    cat <<EOF >> /etc/apk/repositories
    https://packages.wolfi.dev/os
    EOF
    apk update --allow-untrusted
    wget https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    mv wolfi-signing.rsa.pub /usr/lib
    apk add go --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community
    export PATH=$PATH:$(go env GOPATH)/bin
- mode: user
  script: |
    #!/bin/sh
    set -eux -o pipefail
    kernel=$(uname -s)
    case "${kernel}" in
      Linux)
        platform="linux"
        ;;
      *)
        echo "Unknown, unsupported platform: ${kernel}." >&2
        echo "Supported platforms: Linux" >&2
        echo "Bailing out." >&2
        exit 2
    esac

    machine=$(uname -m)
    case "${machine}" in
      x86_64*|i?86_64*|amd64*)
        arch="amd64"
        ;;
      aarch64*|arm64*)
        arch="arm64"
        ;;
      arm*)
        arch="arm"
        ;;
      i?86*)
        arch="386"
        ;;
      *)
        echo "Unknown, unsupported architecture (${machine})." >&2
        echo "Supported architectures x86_64, i686, arm, arm64." >&2
        echo "Bailing out." >&2
        exit 3
        ;;
    esac
    VERSION=0.3.2
    wget https://github.com/chainguard-dev/melange/releases/download/v${VERSION}/melange_${VERSION}_${platform}_${arch}.tar.gz
    tar -xzf melange_${VERSION}_${platform}_${arch}.tar.gz
    chmod +x melange_${VERSION}_${platform}_${arch}/melange
    sudo mv melange_${VERSION}_${platform}_${arch}/melange /usr/local/bin/melange
    rm -rf melange_${VERSION}_${platform}_${arch}
    rm melange_${VERSION}_${platform}_${arch}.tar.gz
    git clone https://github.com/wolfi-dev/wolfictl.git
    (cd wolfictl && sudo make install)
message: |-
  ---
  Run the following to get a root shell (needed to run apko build):
    limactl shell melange-playground sudo su -c "HOME=\"${HOME}\" ash"
  Try building an APK:
     melange build -r https://packages.wolfi.dev/os -k /usr/lib/wolfi-signing.rsa.pub --arch x86_64 examples/gnu-hello.yaml
  ---
