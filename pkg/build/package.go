// Copyright 2022 Chainguard, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package build

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"path/filepath"

	"chainguard.dev/apko/pkg/tarball"
)

type PackageContext struct {
	Context     *Context
	Origin      *Package
	PackageName string
}

func (pkg *Package) Emit(ctx *PipelineContext) error {
	fakesp := Subpackage{
		Name: pkg.Name,
	}
	return fakesp.Emit(ctx)
}

func (spkg *Subpackage) Emit(ctx *PipelineContext) error {
	pc := PackageContext{
		Context:     ctx.Context,
		Origin:      &ctx.Context.Configuration.Package,
		PackageName: spkg.Name,
	}
	return pc.EmitPackage()
}

func (pc *PackageContext) Identity() string {
	return fmt.Sprintf("%s-%s-r%d", pc.PackageName, pc.Origin.Version, pc.Origin.Epoch)
}

func (pc *PackageContext) WorkspaceSubdir() string {
	return filepath.Join(pc.Context.WorkspaceDir, "melange-out", pc.PackageName)
}

var controlTemplate = `
# Generated by melange.
`

// TODO(kaniini): generate APKv3 packages
func (pc *PackageContext) EmitPackage() error {
	log.Printf("generating package %s", pc.Identity())

	dataTarGz, err := os.CreateTemp("", "melange-data-*.tar.gz")
	if err != nil {
		return fmt.Errorf("unable to open temporary file for writing: %w", err)
	}
	defer dataTarGz.Close()

	tarctx, err := tarball.NewContext(
		tarball.WithSourceDateEpoch(pc.Context.SourceDateEpoch),
		tarball.WithOverrideUIDGID(0, 0),
		tarball.WithOverrideUname("root"),
		tarball.WithOverrideGname("root"),
	)
	if err != nil {
		return fmt.Errorf("unable to build tarball context: %w", err)
	}

	var installedSize int64
	fsys := os.DirFS(pc.WorkspaceSubdir())
	if err := fs.WalkDir(fsys, ".", func(path string, d fs.DirEntry, err error) error {
		fi, err := d.Info()
		if err != nil {
			return err
		}

		installedSize += fi.Size()
		return nil
	}); err != nil {
		return fmt.Errorf("unable to preprocess package data: %w", err)
	}

	// TODO(kaniini): generate so:/cmd: virtuals for the filesystem
	// prepare data.tar.gz
	dataDigest := sha256.New()
	mw := io.MultiWriter(dataDigest, dataTarGz)
	if err := tarctx.WriteArchiveFromFS(pc.WorkspaceSubdir(), fsys, mw); err != nil {
		return fmt.Errorf("unable to write data tarball: %w", err)
	}

	dataDigestSum := hex.EncodeToString(dataDigest.Sum(nil))
	log.Printf("  data.tar.gz installed-size: %d", installedSize)
	log.Printf("  data.tar.gz digest: %s", dataDigestSum)

	// prepare control.tar.gz

	return nil
}
