name: Check out sources from git

needs:
  packages:
    - git

inputs:
  repository:
    description: |
      The repository to check out sources from.
    required: true

  destination:
    description: |
      The path to check out the sources to.
    default: .

  depth:
    description: |
      The depth to use when cloning. Set to -1 to not specify depth when cloning.
    default: 1

  branch:
    description: |
      The branch to check out, otherwise HEAD is checked out.
      For reproducibility, tag is generally favored over branch.
      Branch and tag are mutually exclusive.

  tag:
    description: |
      The tag to check out.  Branch and tag are mutually exclusive.

  expected-commit:
    description: |
      The expected commit hash

  recurse-submodules:
    description: |
      Indicates whether --recurse-submodules should be passed to git clone.
    default: false

pipeline:
  - runs: |
      #!/bin/sh
      set -e

      msg() { echo "[git checkout]" "$@"; }
      fail() { msg FAIL "$@"; exit 1; }
      vr() { msg "execute:" "$@"; "$@"; }

      main() {
          local repo=$1 dest=${2:-.} depth=${3:-"-1"} branch=$4
          local tag=$5 expcommit=$6 recurse=${7:-false}
          msg "repo='$repo' dest='$dest' depth='$depth' branch='$branch'" \
              "tag='$tag' expcommit='$expcommit' recurse='$recurse'"

          case "$recurse" in
              true|false) :;;
              *) fail "recurse must be true or false, not '$recurse'"
          esac

          [ -n "$repo" ] || fail "repository not provided"

          if [ -z "$branch" ] && [ -z "$tag" ]; then
              msg "Warning: you have not specified a branch or tag."
          elif [ -n "$branch" ] && [ -n "$tag" ]; then
              fail "both branch ($branch) and tag ($tag) are specified."
          fi

          [ -n "$expcommit" ] ||
              msg "Warning: no expected-commit"

          local flags="" depthflag="" dest_fullpath="" workdir=""
          local remote="origin" rcfile="" rc="" quiet="--quiet"
          flags="--config=advice.detachedHead=false"
          [ -n "$branch" ] && flags="$flags --branch=$branch"
          [ -n "$tag" ] && flags="$flags --branch=$tag"
          [ "$recurse" = "true" ] && flags="$flags --recurse-submodules"

          [ "$depth" = "-1" ] || depthflag="--depth=$depth"

          workdir=$(mktemp -d)
          rcfile=$(mktemp)
          mkdir -p "$dest"
          dest_fullpath=$(realpath "$dest")

          vr git config --global --add safe.directory "$workdir"
          vr git config --global --add safe.directory "$dest_fullpath"

          vr git clone $quiet "--origin=$remote" $flags \
              ${depthflag:+"$depthflag"} "$repo" "$workdir"

          vr cd "$workdir"
          msg "tar -c . | tar -C \"$dest_fullpath\" -x"
          ( tar -c . ; echo $? > "$rcfile") | tar -C "$dest_fullpath" -x
          read rc < "$rcfile" || fail "failed to read rc file"
          [ $rc -eq 0 ] || fail "tar creation in $workdir failed"

          rm -rf "$workdir"
          vr cd "$dest_fullpath"
          vr git config --global --add safe.directory "$dest_fullpath"

          local foundcommit="" tagobj=""
          if [ -z "$tag" ]; then
              foundcommit=$(git rev-parse --verify HEAD)
              if [ -n "$expcommit" ] && [ "$expcommit" != "$foundcommit" ]; then
                  fail "expected commit $expcommit on ${branch:-HEAD}," \
                      " got $foundcommit"
              fi
              msg "tip of ${branch:-HEAD} is commit $foundcommit"
              return 0
          fi

          # git clone --branch=X will pick the branch X if there
          # exists both a tag and a branch by that name.
          # since a tag was given, we want the tag.
          vr git fetch $quiet $remote ${depthflag:-"$depthflag"} --no-tags \
              "+refs/tags/$tag:refs/$remote/tags/$tag"
          vr git checkout $quiet "$remote/tags/$tag"

          foundcommit=$(git rev-parse --verify HEAD)
          if [ -z "$expcommit" ] || [ "$expcommit" = "$foundcommit" ]; then
              msg "tag $tag is $foundcommit"
              return 0
          fi

          # If it's a tag, then it could be a lightweight or annotated tag.
          # Lightweight tags point directly to the commit and do not have
          # any messages, signatures, or other data.  Annotated tags point
          # to its own git object containing the tag data, with a reference
          # to the underlying commit.  We expect most tags to be using
          # annotated tags.
          tagobj=$(git rev-parse --verify --end-of-options \
              "refs/$remote/tags/$tag")
          if [ "$expcommit" != "$tagobj" ]; then
              [ "$tagobj" != "$expcommit" ] &&
                  msg "tag object hash was $tagobj"
              fail "Expected commit $expcommit for $tag, found $foundcommit"
          fi

          msg "Warning: The provided expected-commit ($expcommit)"
          msg "was the hash of the annotated tag object for $tag."
          msg "Update to set expected-commit to $foundcommit"

          return 0
      }

      main \
          "${{inputs.repository}}" "${{inputs.destination}}" \
          "${{inputs.depth}}" "${{inputs.branch}}" \
          "${{inputs.tag}}" "${{inputs.expected-commit}}" \
          "${{inputs.recurse-submodules}}"
